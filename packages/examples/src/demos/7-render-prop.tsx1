import { useEffect } from "react";
import { createPortal } from "react-dom";
import { usePopperTooltip } from "@tm/popper-tooltip";
//import "react-popper-tooltip/dist/styles.css";
import { localClasses } from "./x-styles";

export function D7_RenderProp() {
    return (
        <div className={localClasses.demoSection}>
            <h1 className={localClasses.sectionHeader}>7. react-popper-tooltip</h1>
            <p className={localClasses.explanation}>Render prop example</p>

            <TooltipTrigger
                trigger="click"
                tooltip={({ tooltipRef, getArrowProps, getTooltipProps }) => (
                    <div {...getTooltipProps({ ref: tooltipRef, className: 'tooltip-container', })}>
                        <div {...getArrowProps({ className: 'tooltip-arrow', })} />
                        Tooltip element
                    </div>
                )}
            >
                {
                    ({ triggerRef }) => (
                        <button ref={triggerRef} type="button">
                            Trigger element
                        </button>
                    )
                }
            </TooltipTrigger>
        </div>
    );
}

const canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);

const mutationObserverDefaults = {
    childList: true,
    subtree: true,
};

function TooltipTrigger({
    children,
    // Some defaults changed in the hook implementation. For backward compatibility we have to override them here.
    closeOnReferenceHidden = true,
    defaultTooltipShown,
    getTriggerRef,
    modifiers,
    mutationObserverOptions = mutationObserverDefaults,
    onVisibilityChange,
    placement = 'right',
    portalContainer = canUseDOM ? document.body : null,
    tooltip,
    tooltipShown,
    usePortal = canUseDOM,
    ...restProps
}) {
    const {
        triggerRef,
        getArrowProps,
        getTooltipProps,
        setTooltipRef,
        setTriggerRef,
        visible,
        state,
    } = usePopperTooltip(
        {
            // Some props renamed in the hook implementation.
            defaultVisible: defaultTooltipShown,
            onVisibleChange: onVisibilityChange,
            visible: tooltipShown,
            closeOnTriggerHidden: closeOnReferenceHidden,
            ...restProps,
        },
        {
            placement,
            modifiers,
        }
    );

    const reference = children({
        // No longer required, for backward compatibility.
        getTriggerProps: (props) => props,
        triggerRef: setTriggerRef,
    });

    const popper = tooltip({
        tooltipRef: setTooltipRef,
        getArrowProps,
        getTooltipProps,
        placement: state ? state.placement : undefined,
    });

    useEffect(() => {
        if (typeof getTriggerRef === 'function') getTriggerRef(triggerRef);
    }, [triggerRef, getTriggerRef]);

    return (<>
        {reference}
        {visible
            ? usePortal
                ? createPortal(popper, portalContainer)
                : popper
            : null
        }
    </>);
}
